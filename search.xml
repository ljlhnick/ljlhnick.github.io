<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基础知识总结</title>
    <url>/2020/06/27/2020-06-16/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 22:57:02 GMT+0800 (GMT+08:00) --><a id="more"></a><h2 id="js-和-ts-的区别"><a href="#js-和-ts-的区别" class="headerlink" title="js 和 ts 的区别"></a>js 和 ts 的区别</h2><p>ts 可以使用 class 且可以继承。也可以使用 interface。强类型，IDE 更好的支持，语法题是和编译报错信息。 接口和继承，让代码更容易维护<br>js 是弱语言，编辑器检测不出拼写错误，ts 可以进行类型检测</p><h2 id="vue-响应式原理"><a href="#vue-响应式原理" class="headerlink" title="vue 响应式原理"></a>vue 响应式原理</h2><p>总结： vue 采用数据劫持结合发布-订阅者模式实现响应式，当数据改变，依赖变化，发布消息给订阅者，触发响应的监听回调。<br>data 数据通过 object.definePropot 拥有 getter,setter 方法。getter 收集数据的依赖，当依赖变化，setter 方法进行派发更新。watcher（监听者个实例了 dep 并向 dep.subs 中添加订阅者，dep 通过 notify 遍历 subs 通知每个 watcher 更新。</p><h2 id="js-原型"><a href="#js-原型" class="headerlink" title="js 原型"></a>js 原型</h2><p>每个函数都有一个 propoty 属性，这个属性指向一个原型对象，原型对象的构造函数属性又指向这个函数的指针，原型对象可以有其他的属性和方法。<br>当实例化函数时，器实例有一个内部属性指向这个函数的实例对象。修改实例的属性（同名）并不会改变原型对象的属性。</p><h2 id="es6-常用功能"><a href="#es6-常用功能" class="headerlink" title="es6 常用功能"></a>es6 常用功能</h2><p>class、字符串模板、let 变量、箭头函数（没有 this，其中的 this 指向上下文）、解构、扩展运算付(…)、promise</p><h2 id="vue-的生命周期"><a href="#vue-的生命周期" class="headerlink" title="vue 的生命周期"></a>vue 的生命周期</h2><p>beforeCreate、created、beforeMount、mounted、beforeUpdate、update、beforeDestory、destory</p><h2 id="vue-路由钩子"><a href="#vue-路由钩子" class="headerlink" title="vue 路由钩子"></a>vue 路由钩子</h2><p>全局钩子</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.beforeEach(to, from, next)</span><br><span class="line">router.beforeResolve(to, from, next)</span><br><span class="line">router.afterEach(to, from, next)</span><br></pre></td></tr></table></figure><p>组件钩子</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter(to, from, next)</span><br><span class="line">beforeRouteUpdate(to, from, next)</span><br><span class="line">boforeRouteLeave(to, from, next)</span><br></pre></td></tr></table></figure><p>局部钩子</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beforeEnter  ????</span><br></pre></td></tr></table></figure><p>路由之间的跳转： 声明式跳转（a 标签）、编程式跳转（js router.push()）</p><p>params 和 query 的区别： 前者匹配的 path 指向路由对象中 name 属性，链接形式如 a/b:123 后者路由对象的 name 属性、path 属性都行，链接形式如 a/b/c</p><h2 id="vuex-的属性"><a href="#vuex-的属性" class="headerlink" title="vuex 的属性"></a>vuex 的属性</h2><p>state、getter、mutation、action、module<br>this.store.commit(mutation, value) 同步修改 state 的属性值<br>this.store.dispatch(action, value) 异步操作<br>module 模块划分</p><h2 id="react-的生命周期"><a href="#react-的生命周期" class="headerlink" title="react 的生命周期"></a>react 的生命周期</h2><p>getDefaultProps、getInitialState、componentWillMount、render、componentDidMount、componentWillReceveProps、shouldComponentUpdate、componentWillUpdate、render、componentDidUpdate、componentWillUnMount、componentDidCatch</p><h2 id="react-hook"><a href="#react-hook" class="headerlink" title="react hook"></a>react hook</h2><p>react 16.8 后的特性，补充了无状态组件（函数组件）不能使用有状态组件（class 组件）中 state 以及生命周期的缺点，函数组价不用 new 实例，性能优于 class 组件<br>还可以进行状态跨组价共享</p><h2 id="react-高阶组件"><a href="#react-高阶组件" class="headerlink" title="react 高阶组件"></a>react 高阶组件</h2><p>输入一个组件，返回一个新组件的函数</p><h2 id="jq-获取的-dom-对象和-js-获取的-dom-对象（原生）相互转换"><a href="#jq-获取的-dom-对象和-js-获取的-dom-对象（原生）相互转换" class="headerlink" title="jq 获取的 dom 对象和 js 获取的 dom 对象（原生）相互转换"></a>jq 获取的 dom 对象和 js 获取的 dom 对象（原生）相互转换</h2><p>js 对象 var jsDom = getElementById(“id”);<br>jq 对象 var jqDom = $(“#id”);</p><p>var jsDom2 = jqDom[0]/ jqDom.get(0) // jq 转 js<br>var jqDom2 = $(jsDom) // js 转 jq</p><h2 id="js-对象序列化以及解析-json-字符串"><a href="#js-对象序列化以及解析-json-字符串" class="headerlink" title="js 对象序列化以及解析 json 字符串"></a>js 对象序列化以及解析 json 字符串</h2><p>一般我们会使用 json 格式与后台进行数据传输，是因为 json 数据与 js 对象方便转换、json 数据传输也比较快</p><p>var json = JSON.stringify(js)<br>var js = JSON.parse(josn)</p><p>js 对象与 json 的区别：json 数据的属性必须是字符创，带了双引号””</p><h2 id="ajax-对象请求数据的过程-局部刷新数据，提升性能"><a href="#ajax-对象请求数据的过程-局部刷新数据，提升性能" class="headerlink" title="ajax 对象请求数据的过程, 局部刷新数据，提升性能"></a>ajax 对象请求数据的过程, 局部刷新数据，提升性能</h2><p>原生 js 中使用 XMLHTTPRequest 对象请求后台接口，进行数据交互<br>分为五步： 未初始化 0 : 还没有调用 open 方法， 启动 1 : 调用 open 方法没有调用 send 方法， 发送 2 : 调用 open 方法， 响应 3 ： 接收服务器部分响应数据, 完成 4 :响应成功<br>判断成功获取数据： respond.readyState == 4 &amp;&amp; respond.status == 200</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>fiddler抓包工具以及跨域</title>
    <url>/2020/06/27/fiddler/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 22:57:02 GMT+0800 (GMT+08:00) --><a id="more"></a><p>常用的抓包工具有很多，小到常用 web 调试工具 fireBug， 大到抓包工具 wireShark。fireBug 虽然可抓包，但对模拟 http 请求功能、分析 http 请求详情支持不够且若刷新页面，所有修改不会被保存。wireShark 比较庞大，对只需抓取 http 请求应用来说大材小用。而 fiddler 是客户端和服务器端的 http 代理，能够记录客户端和服务器端间所有 HTTP 请求，针对特定 HTTP 请求，分析请求数据、设置断点、调试 web 应用、修改请求数据，修改服务器响应数据。功能强大，是 web 调试利器。</p><p>代理：客户端请求经过 fiddler，然后转发到服务器。反之，响应数据也会先经过 fiddler 在发送到客户端。基于此模式，fiddler 支持所有可设置 http 代理为 127.0.0.1::8888 的浏览器和应用程序</p><h2 id="扩展工具的用法-MiniFiddler"><a href="#扩展工具的用法-MiniFiddler" class="headerlink" title="扩展工具的用法 MiniFiddler"></a>扩展工具的用法 MiniFiddler</h2><p><a href="https://www.cnblogs.com/yyhh/p/5140852.html" target="_blank" rel="noopener">学习资料</a></p><p>插件安装好后，控制台 tab 会出现一个 MiniFiddler 栏</p><h3 id="记录客户端和服务器端间所有-HTTP-请求"><a href="#记录客户端和服务器端间所有-HTTP-请求" class="headerlink" title="记录客户端和服务器端间所有 HTTP 请求"></a>记录客户端和服务器端间所有 HTTP 请求</h3><p><img src="https://img-blog.csdnimg.cn/20200619103605922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重点注意请求方式，资源类型，地址，状态码，点击查看详情，则如下图出现该请求的详细信息。</p><h3 id="针对特定请求，分析请求数据"><a href="#针对特定请求，分析请求数据" class="headerlink" title="针对特定请求，分析请求数据"></a>针对特定请求，分析请求数据</h3><p><img src="https://img-blog.csdnimg.cn/20200619103317321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>单击请求地址栏可以切换编码方式（分别为 urlencoding 和 urldecoding）</p><h3 id="功能区：过滤器-阻塞规则"><a href="#功能区：过滤器-阻塞规则" class="headerlink" title="功能区：过滤器+阻塞规则"></a>功能区：过滤器+阻塞规则</h3><p>过滤器：根据 css，图片，js 资源去过滤请求<br><img src="https://img-blog.csdnimg.cn/20200619104024837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>阻塞规则<br><img src="https://img-blog.csdnimg.cn/20200619105450165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>URL Blocking 可以让我们添加需要阻塞的 URL 请求规则，关闭控制面板阻塞规则依旧生效，多个页面的阻塞规则相互不影响</p><h3 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h3><p>1.打断点后，fiddler 可修改 http 请求头信息（UA，Cookie，Referer），通过伪造相应信息达到调式、模拟用户真实请求的目标 2.构造请求数据，突破表单验证以及限制，避免 js 和表单限制影响相关调试 3.拦截响应数据，修改响应体</p><p>js 通过模拟真实服务器端响应，不必等待接口，降低联调难度。</p><p>两种断点方式<br>1.fiddler 菜单-&gt; rules-&gt;automatic Breakpoints-&gt;断点方式（断点对之后所有的 http 请求有效） 2.命令行输入 bpater xx、bpv（针对特定类型的请求）</p><p>两个断点位置<br>1.before response：发请求后，fiddler 中转请求前，此时可修改请求数据<br>2.after response： 响应后，fiddler 中转响应前，此时可以修改响应数据</p><h2 id="Fiddler-命令"><a href="#Fiddler-命令" class="headerlink" title="Fiddler 命令"></a>Fiddler 命令</h2><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>选择所有相依类型（content-type）为置顶类型的 HTTP 请求</p><h3 id="allbut"><a href="#allbut" class="headerlink" title="allbut"></a>allbut</h3><p>选择响应类型不是指定类型的 HTTP 请求</p><h3 id="text"><a href="#text" class="headerlink" title="?text"></a>?text</h3><p>选择 URL 匹配问号后字符的全部 HTTP 请求</p><h3 id="gt-size-lt-size"><a href="#gt-size-lt-size" class="headerlink" title="&gt;size &lt;size"></a>&gt;size &lt;size</h3><p>选择响应大小大于、小于某个大小（b）的 HTTP 请求</p><h3 id="status"><a href="#status" class="headerlink" title="=status"></a>=status</h3><h3 id="host"><a href="#host" class="headerlink" title="@host"></a>@host</h3><p>选择 host 含指定 host 的 HTTP 请求</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>JSON 跨域只能实现 get 请求，因为 srcipt 请求 src 所指向的 js 脚本是 get 方式。</p><h3 id="JSONP-跨域"><a href="#JSONP-跨域" class="headerlink" title="JSONP 跨域"></a>JSONP 跨域</h3><p>原理：ajax 因同源策越限制，不可跨域请求，而 script 标签中的 src 可以跨域请求 js 脚本。利用此特性，服务器返回可执行的某个函数的 js 代码，在 src 中调用，就实现了跨域。</p><p>代码实现</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">	$(document).ready(function()&#123;</span><br><span class="line">        function jsonhandle(data)&#123;</span><br><span class="line">            alert(&quot;age:&quot; + data.age + &quot;name:&quot; + data.name);</span><br><span class="line">        &#125;</span><br><span class="line">		var url &#x3D; &quot;http:&#x2F;&#x2F;www.practice-zhao.com&#x2F;student.php?id&#x3D;1&amp;callback&#x3D;jsonhandle&quot;;</span><br><span class="line">		var obj &#x3D; $(&#39;&lt;script&gt;&lt;\&#x2F;script&gt;&#39;);</span><br><span class="line">		obj.attr(&quot;src&quot;,url);</span><br><span class="line">		$(&quot;body&quot;).append(obj);</span><br><span class="line">	&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>jq 提供便于使用 jsonp 的方式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">	$(document).ready(function()&#123;</span><br><span class="line">		$.ajax(&#123;</span><br><span class="line">			type : &quot;get&quot;,</span><br><span class="line">			async: false,</span><br><span class="line">			url : &quot;http:&#x2F;&#x2F;www.practice-zhao.com&#x2F;student.php?id&#x3D;1&quot;,</span><br><span class="line">			dataType: &quot;jsonp&quot;,</span><br><span class="line">			jsonpCallback: &quot;jsonhandle&quot;,&#x2F;&#x2F;要执行的回调函数</span><br><span class="line">			success : function(data) &#123;</span><br><span class="line">				alert(&quot;age:&quot; + data.age + &quot;name:&quot; + data.name);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="CORS-跨域"><a href="#CORS-跨域" class="headerlink" title="CORS 跨域"></a>CORS 跨域</h3><p>需要浏览器和服务器支持，浏览器一旦发现 ajax 请求跨域，就会自动添加一些附加头信息，关键是服务器要实现 CORS 接口。</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>react+mobx+typescript项目练手</title>
    <url>/2020/06/27/react-test/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 22:57:02 GMT+0800 (GMT+08:00) --><a id="more"></a><h2 id="TM-项目用-react-mobx"><a href="#TM-项目用-react-mobx" class="headerlink" title="TM 项目用 react+mobx"></a>TM 项目用 react+mobx</h2><p>公司 TM 项目使用自己搭建 hive 框架，react 技术，mobx 做数据状态管理，ts 用来定义一些数据结构以及接口和枚举值，更好的校验数据的类型结构</p><p>项目上线后，自己用 react 框架+mobx 以及 github 上有名的网易云音乐接口项目想实践下，目前代理成功。可以获取部分接口，有些接口需要登录成功才可以使用。目前我登录成功能拿到 cookie 存储成功，但是还是不能获取到接口，一直 404，很迷。</p><h2 id="表单登录检验，成功登录"><a href="#表单登录检验，成功登录" class="headerlink" title="表单登录检验，成功登录"></a>表单登录检验，成功登录</h2><p><img src="https://img-blog.csdnimg.cn/20200611120126102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="获取指定-uid-的歌单列表"><a href="#获取指定-uid-的歌单列表" class="headerlink" title="获取指定 uid 的歌单列表"></a>获取指定 uid 的歌单列表</h2><p><img src="https://img-blog.csdnimg.cn/20200611120528568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="获取指定-uid-的听歌记录"><a href="#获取指定-uid-的听歌记录" class="headerlink" title="获取指定 uid 的听歌记录"></a>获取指定 uid 的听歌记录</h2><p>分为最近一周和所有记录（tab 切换），每个 tab 最高条数 100，支持分页（10 条/页）<br><img src="https://img-blog.csdnimg.cn/20200611120445337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="mobx-配合有状态函数使用（class）"><a href="#mobx-配合有状态函数使用（class）" class="headerlink" title="mobx 配合有状态函数使用（class）"></a>mobx 配合有状态函数使用（class）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import &#123; observer, inject &#125; from &quot;mobx-react&quot;;</span><br><span class="line">import &#123; toJS &#125; from &quot;mobx&quot;;</span><br><span class="line">import &#123; Button, Form, Input, notification &#125; from &quot;antd&quot;;</span><br><span class="line">import &quot;..&#x2F;App.css&quot;;</span><br><span class="line">import &quot;antd&#x2F;dist&#x2F;antd.css&quot;;</span><br><span class="line"></span><br><span class="line">@inject((&#123; Login &#125;) &#x3D;&gt; (&#123;</span><br><span class="line">  setField: Login.setField,</span><br><span class="line">  submitAndLogin: Login.submitAndLogin,</span><br><span class="line">  getCaptcha: Login.getCaptcha,</span><br><span class="line">  profile: Login.profile,</span><br><span class="line">  isLogin: Login.isLogin,</span><br><span class="line">  getPlayList: Login.getPlayList,</span><br><span class="line">&#125;))</span><br><span class="line">@observer</span><br><span class="line">class Login extends React.Component &#123;</span><br><span class="line">  openNotification() &#123;</span><br><span class="line">    const &#123; profile &#125; &#x3D; this.props;</span><br><span class="line">    let profileToJs &#x3D; toJS(profile);</span><br><span class="line">    notification.open(&#123;</span><br><span class="line">      message: &quot;Login success&quot;,</span><br><span class="line">      description: &#96;welcome $&#123;profileToJs.nickName&#125;, your uid is $&#123;profileToJs.userId&#125;&#96;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    const &#123;</span><br><span class="line">      setField,</span><br><span class="line">      submitAndLogin,</span><br><span class="line">      regist,</span><br><span class="line">      isLogin,</span><br><span class="line">      getCaptcha,</span><br><span class="line">    &#125; &#x3D; this.props;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Form className&#x3D;&quot;from&quot;&gt;</span><br><span class="line">          &lt;Form.Item</span><br><span class="line">            label&#x3D;&quot;phoneNumber&quot;</span><br><span class="line">            name&#x3D;&quot;phoneNumber&quot;</span><br><span class="line">            rules&#x3D;&#123;[</span><br><span class="line">              &#123; required: true, message: &quot;Please input your phoneNumber&quot; &#125;,</span><br><span class="line">            ]&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;Input</span><br><span class="line">              placeholder&#x3D;&quot;phoneNumber&quot;</span><br><span class="line">              onChange&#x3D;&#123;(e) &#x3D;&gt; setField(&quot;phoneNumber&quot;, e.target.value)&#125;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;Form.Item&gt;</span><br><span class="line">          &lt;Form.Item</span><br><span class="line">            label&#x3D;&quot;PassWord&quot;</span><br><span class="line">            name&#x3D;&quot;PassWord&quot;</span><br><span class="line">            rules&#x3D;&#123;[&#123; required: true, message: &quot;Please input your PassWord&quot; &#125;]&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;Input</span><br><span class="line">              placeholder&#x3D;&quot;passWord&quot;</span><br><span class="line">              onChange&#x3D;&#123;(e) &#x3D;&gt; setField(&quot;passWord&quot;, e.target.value)&#125;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;Form.Item&gt;</span><br><span class="line">          &lt;Form.Item label&#x3D;&quot;验证码&quot; name&#x3D;&quot;captcha&quot;&gt;</span><br><span class="line">            &lt;Input</span><br><span class="line">              placeholder&#x3D;&quot;验证码&quot;</span><br><span class="line">              onChange&#x3D;&#123;(e) &#x3D;&gt; setField(&quot;captcha&quot;, e.target.value)&#125;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">            &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; getCaptcha()&#125;&gt;获取验证码&lt;&#x2F;Button&gt;</span><br><span class="line">          &lt;&#x2F;Form.Item&gt;</span><br><span class="line">          &lt;Form.Item label&#x3D;&quot;昵称&quot; name&#x3D;&quot;nickName&quot;&gt;</span><br><span class="line">            &lt;Input</span><br><span class="line">              placeholder&#x3D;&quot;昵称&quot;</span><br><span class="line">              onChange&#x3D;&#123;(e) &#x3D;&gt; setField(&quot;nickName&quot;, e.target.value)&#125;</span><br><span class="line">            &#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;Form.Item&gt;</span><br><span class="line">          &lt;Form.Item&gt;</span><br><span class="line">            &lt;Button</span><br><span class="line">              type&#x3D;&quot;primary&quot;</span><br><span class="line">              htmlType&#x3D;&quot;submit&quot;</span><br><span class="line">              onClick&#x3D;&#123;() &#x3D;&gt; submitAndLogin()&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              Login in</span><br><span class="line">            &lt;&#x2F;Button&gt;</span><br><span class="line">            &lt;Button type&#x3D;&quot;primary&quot; htmlType&#x3D;&quot;regist&quot; onClick&#x3D;&#123;() &#x3D;&gt; regist()&#125;&gt;</span><br><span class="line">              Register</span><br><span class="line">            &lt;&#x2F;Button&gt;</span><br><span class="line">            &#123;isLogin &amp;&amp; this.openNotification()&#125;</span><br><span class="line">          &lt;&#x2F;Form.Item&gt;</span><br><span class="line">        &lt;&#x2F;Form&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Login;</span><br></pre></td></tr></table></figure><p>antd 4.0 移除了 From.create 和 onSubmit 改用 onFinish 会自动验证</p><h2 id="create-react-app-引入-typescript"><a href="#create-react-app-引入-typescript" class="headerlink" title="create=react-app 引入 typescript"></a>create=react-app 引入 typescript</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">首次：create-react-app demo02 --typescript</span><br><span class="line">已构建： npm install --save typescript @types&#x2F;node @types&#x2F;react @types&#x2F;react-dom @types&#x2F;jest</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo next主题博客</title>
    <url>/2020/06/06/about-blog/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 22:57:02 GMT+0800 (GMT+08:00) --><a id="more"></a><h2 id="添加网页音乐播放器功能"><a href="#添加网页音乐播放器功能" class="headerlink" title="添加网页音乐播放器功能"></a>添加网页音乐播放器功能</h2><p><a href="https://asdfv1929.github.io/2018/05/26/next-add-music/" target="_blank" rel="noopener">https://asdfv1929.github.io/2018/05/26/next-add-music/</a><br><a href="https://www.365cent.com/music/" target="_blank" rel="noopener">音乐外链生成网站</a></p><h2 id="添加评论功能、全局搜索"><a href="#添加评论功能、全局搜索" class="headerlink" title="添加评论功能、全局搜索"></a>添加评论功能、全局搜索</h2><p>我用的畅言 密码是12345678lj， 搜索功能安装包，然后配置下</p><h2 id="tagCloud"><a href="#tagCloud" class="headerlink" title="tagCloud"></a>tagCloud</h2><p><a href="https://blog.csdn.net/aoman_hao/article/details/89416634" target="_blank" rel="noopener">https://blog.csdn.net/aoman_hao/article/details/89416634</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-tag-cloud --save &#x2F;&#x2F;配置</span><br></pre></td></tr></table></figure><h2 id="添加动漫人物"><a href="#添加动漫人物" class="headerlink" title="添加动漫人物"></a>添加动漫人物</h2><p><a href="https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-22" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/#toc-heading-22</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-helper-live2d --save</span><br><span class="line">npm i live2d-widget-model-shizuku --save  &#x2F;&#x2F;配置</span><br></pre></td></tr></table></figure><h2 id="自定义友链页面"><a href="#自定义友链页面" class="headerlink" title="自定义友链页面"></a>自定义友链页面</h2><p><a href="https://blog.maplesugar.space/hexo/next-theme-custom-friendlinks-page/" target="_blank" rel="noopener">https://blog.maplesugar.space/hexo/next-theme-custom-friendlinks-page/</a></p><h2 id="hexo博客生成、部署"><a href="#hexo博客生成、部署" class="headerlink" title="hexo博客生成、部署"></a>hexo博客生成、部署</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n          # 新建文章，在\source\_posts文件夹里</span><br><span class="line">hexo new page   # 新建页面，比如想在导航栏新增一个“关于我”的页面</span><br><span class="line">hexo clean      # 清除本地的数据库和生成的public文件夹</span><br><span class="line">hexo g          # 生成博客文件</span><br><span class="line">hexo s          # 运行在本地浏览器，可当预览使用</span><br><span class="line">hexo d          # 部署博客到Github等</span><br></pre></td></tr></table></figure><h2 id="其他想尝试的hexo主题"><a href="#其他想尝试的hexo主题" class="headerlink" title="其他想尝试的hexo主题"></a>其他想尝试的hexo主题</h2><p>ghost、hexo-theme-yilia</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全方面的学习</title>
    <url>/2020/06/27/secure/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 22:57:02 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="前端安全"><a href="#前端安全" class="headerlink" title="前端安全"></a>前端安全</h1><p>前端安全防范对开发越来越重要</p><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>中文名跨域脚本攻击。攻击者将可执行的代码注入到网页中，可分为持久型和非持久型。<br>持久型：攻击代码被服务端写入数据库，攻击危害性大。对于评论功能得防范持久型 XSS 攻击<br>非持久型：通过修改 url 参数方式加入攻击代码，诱导用户访问链接从而攻击。谷歌浏览器会自动防御</p><p>防御方法<br>转义字符：对于用户的输入永不信任，转义输入内容，特别是” &lt;&gt; / 还有”alert”,”eval”,”onload”,”onfocus”,”onerror”,”onclick”等字符串。<br>CSP：建立白名单，通过配置规则，明确告诉浏览器哪些外部资源可以加载执行，不符合的进行拦截</p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>中文为跨站请求伪造。攻击者构造出一个后端请求地址，诱导用户点击或通过某种途径自动发起请求</p><p>防御方法<br>Token: 每次发请求都带 token，服务器验证 token 是否有效<br>验证 Referer：验证它来判断是否是第三方网站发起</p><h2 id="XSS-和-CSRF-的区别"><a href="#XSS-和-CSRF-的区别" class="headerlink" title="XSS 和 CSRF 的区别"></a>XSS 和 CSRF 的区别</h2><p>1.XSS 不需要登录，CSRF 需用户登录获取其 cookie<br>2.XSS 是向网站注入、执行 JS 代码，篡改网站内容。CSRF 利用网站漏洞，去请求网站的 API。</p><h2 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h2><p>是视觉欺骗。攻击者将攻击网站通过 iframe 嵌套的方式嵌入，并将 iframe 设置为透明，在页面中透出按钮诱导用户点击</p><p>防御方法<br>X-FRAME-OPTIONS 为一个 HTTP 响应头，可以防御 iframe 嵌套的点击劫持攻击<br>js 防御</p><h2 id="SQL-注入攻击"><a href="#SQL-注入攻击" class="headerlink" title="SQL 注入攻击"></a>SQL 注入攻击</h2><p>将 sql 命令插入表单，url，页面请求得传参中，从而欺骗服务器执行恶意 sql</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端常用工具库</title>
    <url>/2020/06/27/tools/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 22:57:02 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="postman-后台-API-测试工具"><a href="#postman-后台-API-测试工具" class="headerlink" title="postman 后台 API 测试工具"></a>postman 后台 API 测试工具</h1><p>设置全局环境以及全局变量，避免重复手动输入，引入全局环境和变量时<br><img src="https://img-blog.csdnimg.cn/20200602092428912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>新建<br><img src="https://img-blog.csdnimg.cn/20200602092803609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>管理集合<br><img src="https://img-blog.csdnimg.cn/20200602092907964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>进行 API 测试<br><img src="https://img-blog.csdnimg.cn/20200602093312979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>EolinkerAPI 测试平台<br>公司推行自动化测试，觉得这个比 postman 能更好的多人协作，购买也不贵，开发推动，所以进项了培训，今天完成了几个 API 测试，并编写了测试用例<br><img src="https://img-blog.csdnimg.cn/20200611114627951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>更改 API 请求头，请求体<br><img src="https://img-blog.csdnimg.cn/20200611114836661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>编写并运行测试用例<br><img src="https://img-blog.csdnimg.cn/20200611114932605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="moment-时间格式化工具"><a href="#moment-时间格式化工具" class="headerlink" title="moment 时间格式化工具"></a>moment 时间格式化工具</h1><p><a href="https://segmentfault.com/a/1190000015240911" target="_blank" rel="noopener">文档链接</a></p><h2 id="获取时间、设置时间"><a href="#获取时间、设置时间" class="headerlink" title="获取时间、设置时间"></a>获取时间、设置时间</h2><p>Get Time</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">moment().year()&#x2F;moment().get(&#39;year&#39;)</span><br><span class="line">moment().month()&#x2F;moment().get(&#39;month&#39;)    &#x2F;&#x2F;0-11</span><br><span class="line">moment().date()&#x2F;moment().get(&#39;date&#39;)</span><br><span class="line">moment().hours()&#x2F;moment().get(&#39;hours&#39;)</span><br><span class="line">moment().minutes()&#x2F;moment().get(&#39;minutes&#39;)</span><br><span class="line">moment().minutes()&#x2F;seconds().get(&#39;seconds&#39;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取一个星期中的某一天</span><br><span class="line">moment().day()&#x2F;moment().get(&#39;day&#39;)   &#x2F;&#x2F;0-6 Sunday-Saturday</span><br><span class="line">moment().weekday()&#x2F;moment().get(&#39;weekday&#39;)   &#x2F;&#x2F;0-6 Sunday-Saturday</span><br><span class="line">moment().isoWeekday()&#x2F;moment().get(&#39;isoWeekday&#39;)   &#x2F;&#x2F;1-7 Monday-Sunday</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取当前月总天数</span><br><span class="line">moment().daysInMonth()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取时间戳  Timestamp</span><br><span class="line">moment().format(&#39;X&#39;)   &#x2F;   moment().unix()          &#x2F;&#x2F;以s为单位</span><br><span class="line">moment().format(&#39;x&#39;)   &#x2F;   moment().valueOf()    &#x2F;&#x2F;以ms为单位</span><br></pre></td></tr></table></figure><p>Set Time</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">moment().year(Number)</span><br><span class="line">moment().set(&#39;y&#39;, xxx)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;设置一个星期中的某一天</span><br><span class="line">moment().weekday(number)&#x2F;moment().set(&#39;weekday&#39;,xxxx)   &#x2F;&#x2F;0-6 Sunday-Saturday</span><br><span class="line">moment().isoWeekday(number)&#x2F;moment().set(&#39;isoWeekday,xxx&#39;)   &#x2F;&#x2F;1-7 Monday-Sunday</span><br></pre></td></tr></table></figure><p>加减时间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">moment().add(Number, String)   &#x2F;    moment().add(Object)</span><br><span class="line">moment().subtract(Number, String)   &#x2F;    moment().subtract(Object)</span><br></pre></td></tr></table></figure><h2 id="常用格式化方法"><a href="#常用格式化方法" class="headerlink" title="常用格式化方法"></a>常用格式化方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">moment().format()</span><br><span class="line">moment().format(String)</span><br><span class="line"></span><br><span class="line">string可为  &#39;YYYY年MM月DD日&#39;   &#39;YYYY-MM-DD    HH时mm分ss秒   &#39;YYYY年MM月DD日&#39;（12小时制）</span><br></pre></td></tr></table></figure><h2 id="比较时间大小"><a href="#比较时间大小" class="headerlink" title="比较时间大小"></a>比较时间大小</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export function startTimeThenCurrentTime(scheduleStartTime, currentTime)&#123;</span><br><span class="line">    if(scheduleStartTime &amp;&amp; !scheduleStartTime.isAfter(currentTime ,&#39;minute&#39;) )&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function endTimeThenCurrentTime(scheduleEndTime, currentTime)&#123;</span><br><span class="line">    if(scheduleEndTime &amp;&amp; !scheduleEndTime.isAfter(currentTime ,&#39;minute&#39;))&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function endTimeThenstartTime(scheduleStartTime, scheduleEndTime)&#123;</span><br><span class="line">    if(scheduleEndTime &amp;&amp; scheduleEndTime &lt;&#x3D; scheduleStartTime)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例<br><img src="https://img-blog.csdnimg.cn/20200602100627999.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200602100704486.png" alt="在这里插入图片描述"></p><h1 id="lodash-模块化、高性能的-js-实用工具库"><a href="#lodash-模块化、高性能的-js-实用工具库" class="headerlink" title="lodash 模块化、高性能的 js 实用工具库"></a>lodash 模块化、高性能的 js 实用工具库</h1><p><a href="https://www.lodashjs.com/docs/latest" target="_blank" rel="noopener">文档链接</a></p><h2 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_.forEach(collection, [iteratee&#x3D;_.identity])</span><br><span class="line">_.filter(collection, [predicate&#x3D;_.identity])</span><br><span class="line">_.find(collection, [predicate&#x3D;_.identity], [fromIndex&#x3D;0])</span><br><span class="line">_.includes(collection, value, [fromIndex&#x3D;0])</span><br><span class="line">.map(collection, [iteratee&#x3D;_.identity])</span><br><span class="line">_.size(collection)</span><br><span class="line">_.orderBy(collection, [iteratees&#x3D;[_.identity]], [orders])</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>API测试</tag>
      </tags>
  </entry>
  <entry>
    <title>前端杂货铺</title>
    <url>/2020/06/27/store-material/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 22:57:02 GMT+0800 (GMT+08:00) --><a id="more"></a><h2 id="常用的-VS-插件"><a href="#常用的-VS-插件" class="headerlink" title="常用的 VS 插件"></a>常用的 VS 插件</h2><p>ESlint-格式校验、GitLens-git 工具、open in brower-浏览器打开 html、vscode-icons-目录文件图标、html css surport-智能提示 class、Path Intellisense-智能补全路径、Atuo Rename Tag-修改标签自动更改闭合标签、css peek-查看相应的 id 和 class 具体定义、Image Preview-图片预览、JavaScript (ES6) code snippets-es6 代码、vetur-语法高亮，智能感知、</p><h2 id="前端常用插件汇总"><a href="#前端常用插件汇总" class="headerlink" title="前端常用插件汇总"></a>前端常用插件汇总</h2><p><a href="https://blog.csdn.net/bbsyi/article/details/80909412" target="_blank" rel="noopener">https://blog.csdn.net/bbsyi/article/details/80909412</a></p><h2 id="git-提交加入表情"><a href="#git-提交加入表情" class="headerlink" title="git 提交加入表情"></a>git 提交加入表情</h2><p><a href="https://gitmoji.carloscuesta.me/" target="_blank" rel="noopener">表情大全</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &#39;:emoji1: :emoji2: :emoji3: 此次提交的内容说明&#39;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>TM codeview 知识回顾</title>
    <url>/2020/06/27/tm-review/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 22:57:03 GMT+0800 (GMT+08:00) --><a id="more"></a><h2 id="只有一种情况返回bool值函数"><a href="#只有一种情况返回bool值函数" class="headerlink" title="只有一种情况返回bool值函数"></a>只有一种情况返回bool值函数</h2><p>这种情况可以直接用表达值返回，给字段设置bool值也可以直接用表达式</p><h2 id="无依赖的请求可以用并行"><a href="#无依赖的请求可以用并行" class="headerlink" title="无依赖的请求可以用并行"></a>无依赖的请求可以用并行</h2><p>不依赖其他请求的返回值，且对多个请求的数据进行统一的处理(es6结构)，可以直接用Promise.all([p1,p2]).then(result =&gt; {})</p><p><a href="http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html</a></p><h2 id="Promise与async-await的区别"><a href="#Promise与async-await的区别" class="headerlink" title="Promise与async/await的区别"></a>Promise与async/await的区别</h2><p><a href="https://www.jianshu.com/p/fe0159f8beb4" target="_blank" rel="noopener">https://www.jianshu.com/p/fe0159f8beb4</a></p><p>Promise被明确拒绝时，会发生拒绝，但是若构造函数回调中引发错误，则会隐式拒绝。<br>例子</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    let p &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">        throw new Error(&quot;I&#39;m error&quot;);  &#x2F;&#x2F; reject(new Error(&quot;I&#39;m Error&quot;));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;catch(e) &#123;</span><br><span class="line">    console.log(&#39;catch&#39;,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    throw new Error(&quot;I&#39;m error&quot;); &#x2F;&#x2F; reject(new Error(&quot;I&#39;m Error&quot;));</span><br><span class="line">&#125;);</span><br><span class="line">p.catch(e &#x3D;&gt; &#123;console.log(&#39;catch&#39;, e)&#125;);</span><br></pre></td></tr></table></figure><p>async/await 寄生于Promise，Generator的语法糖。async函数返回Promise对象，可在被调用处使用then执行异步成功操作。但是Promise也可能会返回rejected，所以await命令放在try catch中。await强制把异步变同步，一句await执行完，才会执行下一句。</p><p>规则：async是异步函数，await只放在异步函数中。 await这等待promise返回结果，在继续执行</p><p>async错误处理： await不用写then，则catch也不用。直接用标准的try…catch语法捕捉错误。内部出错和上面Promise一样，不会在try…catch捕捉到。只会链式catch捕捉</p><h2 id="deferred对象"><a href="#deferred对象" class="headerlink" title="deferred对象"></a>deferred对象</h2><p>deferred为延迟对象，延迟到某个点才开始执行，改变执行结构的方法有两个(resolve、reject),分别对应两种回调(done、fail)，always不能成功失败都调用<br>ajax其实就是deferred对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.ajax(url, method).done(res &#x3D;&gt; &#123;&#125;).fail(e &#x3D;&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;对个异步请求并行</span><br><span class="line">$.when(ajax1, ajax2).done(resulit &#x3D;&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><p>常用API<br><img src="https://images0.cnblogs.com/blog/453211/201308/17232146-f0b38ea700354dba9b68bdd2e550664b.jpg" alt="deferred"></p><h2 id="lodash-debounce防抖动函数"><a href="#lodash-debounce防抖动函数" class="headerlink" title="lodash debounce防抖动函数"></a>lodash debounce防抖动函数</h2><p>._debounce(func, [wait=0], [option={}])</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery(window).on(&#39;resize&#39;, _.debounce(calculateLayout, 150));</span><br></pre></td></tr></table></figure><h2 id="逻辑简化，善用map"><a href="#逻辑简化，善用map" class="headerlink" title="逻辑简化，善用map"></a>逻辑简化，善用map</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.allTechnicianList &#x3D; [];</span><br><span class="line">data.map(item &#x3D;&gt; &#123;</span><br><span class="line">    this.allTechnicianList.push(&#123;</span><br><span class="line">        id: item.Id,</span><br><span class="line">        name: item.FullName</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">this.allTechnicianList &#x3D; data.map(item &#x3D;&gt; &#123; id: Item.id, name: item.name&#125;)</span><br></pre></td></tr></table></figure><h2 id="eval用法"><a href="#eval用法" class="headerlink" title="eval用法"></a>eval用法</h2><p>去掉对象外的””</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval(&#39;(&#39;+&quot;&#123;title : &#39;Something was wrong!&#39;,text:&#39;Schedule start time must not be earlier than the current time.&#39;&#125;&quot;+&#39;)&#39;)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>vue测试</title>
    <url>/2020/06/27/vue-jest/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 22:57:03 GMT+0800 (GMT+08:00) --><a id="more"></a><p><a href="https://juejin.im/post/5e18863df265da3e1932cddc#heading-4" target="_blank" rel="noopener">jest+vue-test-utils</a><br><a href="https://juejin.im/post/5e18863df265da3e1932cddc#heading-4" target="_blank" rel="noopener">vue jest 单元测试</a><br><a href="https://blog.csdn.net/tonylua/article/details/103750356" target="_blank" rel="noopener">store</a></p><h2 id="测试类型"><a href="#测试类型" class="headerlink" title="测试类型"></a>测试类型</h2><p>三类测试：单元测试、集成测试、端到端测试<br>单元测试：单独使用在单个代码单元（类、函数）<br>集成测试：检查多个单元是否协同（组件层次结构、组件+存储）<br>端到端：外部观察浏览器上的交互</p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>descible：围绕测试单元组件测试用例: 可以是类、函数、组件等<br>it： 测试用例<br>mocha 没有断言库，选择 chai</p><h2 id="shallowMount-与-mount-区别"><a href="#shallowMount-与-mount-区别" class="headerlink" title="shallowMount 与 mount 区别"></a>shallowMount 与 mount 区别</h2><p>前者不会渲染子组件</p><h2 id="组件交互"><a href="#组件交互" class="headerlink" title="组件交互"></a>组件交互</h2><h3 id="组件实例交互"><a href="#组件实例交互" class="headerlink" title="组件实例交互"></a>组件实例交互</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;shallowMount&#125; from &#39;@vue&#x2F;test-utils&#39;;</span><br><span class="line">import &#123;expect&#125; from &#39;chai&#39;;</span><br><span class="line">import App from &#39;..&#x2F;..&#x2F;src&#x2F;App&#39;;</span><br><span class="line"></span><br><span class="line">const wrapper &#x3D; shallowMount(Movie);</span><br><span class="line"></span><br><span class="line">describe(&#39;Movie component&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    it(&#39;check default data&#39;, () &#x3D;&gt;&#123;</span><br><span class="line">        const defaultData &#x3D; Movie.data();</span><br><span class="line">        expect(defaultData.currentTabName).to.eql(&#39;Top250&#39;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(&#39;check change tab function&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">        wrapper.vm.changeTab(&quot;Top250&quot;);</span><br><span class="line">        expect(wrapper.vm.baseUrl).to.eql(&quot;&#x2F;ban&#x2F;v2&#x2F;movie&#x2F;top250&quot;);</span><br><span class="line">        wrapper.vm.changeTab(&quot;正在上映&quot;);</span><br><span class="line">        expect(wrapper.vm.baseUrl).to.eql(&quot;&#x2F;ban&#x2F;v2&#x2F;movie&#x2F;in_theaters&quot;);</span><br><span class="line">        wrapper.vm.changeTab(&quot;即将上映&quot;)</span><br><span class="line">        expect(wrapper.vm.baseUrl).to.eql(&quot;&#x2F;ban&#x2F;v2&#x2F;movie&#x2F;coming_soon&quot;);</span><br><span class="line">        wrapper.vm.changeTab(&quot;新片榜&quot;);</span><br><span class="line">        expect(wrapper.vm.baseUrl).to.eql(&quot;&#x2F;ban&#x2F;v2&#x2F;movie&#x2F;new_movies&quot;);</span><br><span class="line">        wrapper.vm.changeTab(&quot;口碑榜&quot;);</span><br><span class="line">        expect(wrapper.vm.baseUrl).to.eql(&quot;&#x2F;ban&#x2F;v2&#x2F;movie&#x2F;weekly&quot;);</span><br><span class="line">        wrapper.vm.changeTab(&quot;北美票房榜&quot;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    it(&#39;check changePageList&#39;, () &#x3D;&gt;&#123;</span><br><span class="line">        const wrapper &#x3D; shallowMount(Movie);</span><br><span class="line">        wrapper.vm.changePageList(2);</span><br><span class="line">        expect(wrapper.vm.start).to.eql(2);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="DOM-交互"><a href="#DOM-交互" class="headerlink" title="DOM 交互"></a>DOM 交互</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">it(&#39;should modify the text after clicking the button&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  const wrapper &#x3D; shallowMount(Footer);</span><br><span class="line"></span><br><span class="line">  wrapper.find(&#39;button&#39;).trigger(&#39;click&#39;);</span><br><span class="line">  const text &#x3D; wrapper.find(&#39;.info&#39;).text();</span><br><span class="line"></span><br><span class="line">  expect(text).to.eql(&#39;Modified by click&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="父子组件交互"><a href="#父子组件交互" class="headerlink" title="父子组件交互"></a>父子组件交互</h3><p>用 propsData 设置输入的 props，触发事件通过调用 emitted 方法，得到一个对象，key 是事件名，value 是事件参数数组</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">it(&#39;should handle interactions&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  const wrapper &#x3D; shallowMount(Footer, &#123;</span><br><span class="line">    propsData: &#123; info: &#39;Click to modify&#39; &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  wrapper.vm.modify();</span><br><span class="line"></span><br><span class="line">  expect(wrapper.vm.info).to.eql(&#39;Click to modify&#39;);</span><br><span class="line">  expect(wrapper.emitted().modify).to.eql([</span><br><span class="line">    [&#39;Modified by click&#39;]</span><br><span class="line">  ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="store-集成"><a href="#store-集成" class="headerlink" title="store 集成"></a>store 集成</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; expect &#125; from &#39;chai&#39;;</span><br><span class="line">import fetch from &quot;node-fetch&quot;;</span><br><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">import &#123; shallowMount, createLocalVue &#125; from &#39;@vue&#x2F;test-utils&#39;</span><br><span class="line">import Index from &#39;@&#x2F;components&#x2F;Index.vue&#39;;</span><br><span class="line">import Vuex from &#39;vuex&#39;;</span><br><span class="line">import &#123; moduleA &#125; from &quot;..&#x2F;..&#x2F;src&#x2F;store&#x2F;index.js&quot;;</span><br><span class="line"></span><br><span class="line">describe(&#39;Index.vue&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F;测试getters</span><br><span class="line">  it(&#39;check getters saleProducts&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    const localVue &#x3D; createLocalVue();</span><br><span class="line">    localVue.use(Vuex);</span><br><span class="line"></span><br><span class="line">    const vuexStore &#x3D; new Vuex.Store(moduleA);</span><br><span class="line">    vuexStore.getters.saleProducts;</span><br><span class="line">    expect(vuexStore.state.products[1].price).to.eql(120);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;测试mutataions</span><br><span class="line">  it(&#39;check mutataions minuPrice&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    const localVue &#x3D; createLocalVue();</span><br><span class="line">    localVue.use(Vuex);</span><br><span class="line"></span><br><span class="line">    const vuexStore &#x3D; new Vuex.Store(moduleA);</span><br><span class="line">    vuexStore.commit(&#39;minuPrice&#39;, 2);</span><br><span class="line">    expect(vuexStore.state.products).length &#x3D;&#x3D;&#x3D; 4;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(&#39;check mutataions setActiveMenu&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    const localVue &#x3D; createLocalVue();</span><br><span class="line">    localVue.use(Vuex);</span><br><span class="line"></span><br><span class="line">    const vuexStore &#x3D; new Vuex.Store(moduleA);</span><br><span class="line">    vuexStore.commit(&#39;setActiveMenu&#39;, &#39;电影&#39;);</span><br><span class="line">    expect(vuexStore.state.activeMenu).to.eql(&quot;电影&quot;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;测试action</span><br><span class="line">  it(&#39;check minuPriceAsync&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    const localVue &#x3D; createLocalVue();</span><br><span class="line">    localVue.use(Vuex);</span><br><span class="line"></span><br><span class="line">    const vuexStore &#x3D; new Vuex.Store(moduleA);</span><br><span class="line">    vuexStore.dispatch(&#39;minuPriceAsync&#39;, 5);</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      vuexStore.commit(&#39;minuPrice&#39;, 5);</span><br><span class="line">      expect(vuexStore.state.products[0].price).to.eql(246);</span><br><span class="line">      done();</span><br><span class="line">    &#125;, 2000);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123;shallowMount, createLocalVue, mount&#125; from &#39;@vue&#x2F;test-utils&#39;;</span><br><span class="line">import &#123;expect&#125; from &#39;chai&#39;;</span><br><span class="line">import App from &#39;..&#x2F;..&#x2F;src&#x2F;App&#39;;</span><br><span class="line">import Movie from &#39;..&#x2F;..&#x2F;src&#x2F;components&#x2F;Movie&#39;;</span><br><span class="line">import MovieDetail from &#39;..&#x2F;..&#x2F;src&#x2F;components&#x2F;MovieDetail&#39;;</span><br><span class="line">import VueRouter from &quot;vue-router&quot;;</span><br><span class="line">const wrapper &#x3D; shallowMount(Movie);</span><br><span class="line"></span><br><span class="line">describe(&#39;Movie component&#39;, () &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    it(&#39;check the detail, render child com via routing&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">        const localVue &#x3D; createLocalVue();</span><br><span class="line">        localVue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">        const router &#x3D; new VueRouter(&#123;</span><br><span class="line">            routes: [</span><br><span class="line">                &#123; path: &#39;&#x2F;movie&#39;, name: &quot;Movie&quot;, component: Movie&#125;,</span><br><span class="line">                &#123; path: &quot;&#x2F;movie&#x2F;:id&quot;, name: &quot;MovieDetail&quot;, component:MovieDetail&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;);</span><br><span class="line">        const wrapperRouter &#x3D; mount(App, &#123;localVue, router&#125;);</span><br><span class="line">        router.push(&quot;&#x2F;movie&#x2F;1292052&quot;);</span><br><span class="line">        expect(wrapperRouter.find(MovieDetail).exists()).to.be.not.ok;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>jest</category>
      </categories>
      <tags>
        <tag>单元测试</tag>
      </tags>
  </entry>
  <entry>
    <title>基于vue框架以及网易云API实现的小项目</title>
    <url>/2020/06/27/vue-wangyiyun/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 22:57:03 GMT+0800 (GMT+08:00) --><a id="more"></a><h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><p>github 地址： <strong><a href="https://github.com/ljlhnick/vue-wangyiyun" target="_blank" rel="noopener">https://github.com/ljlhnick/vue-wangyiyun</a></strong> 喜欢欢迎点个 start，支持下我<br>技术方案：vue+vue-router+axios+typeScript+element-ui+vue-property-decorator（class 方式写组件）</p><h2 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h2><p>歌单列表，歌单，分页，播放详情，个人资料提交</p><h2 id="代码-class-编程"><a href="#代码-class-编程" class="headerlink" title="代码 class 编程"></a>代码 class 编程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script lang&#x3D;&quot;ts&quot;&gt;</span><br><span class="line">import &#123; formatDate &#125; from &quot;.&#x2F;date.js&quot;;</span><br><span class="line">import TableList from &quot;..&#x2F;tableList.vue&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">import &#123; Vue, Component, Watch &#125; from &quot;vue-property-decorator&quot;;</span><br><span class="line">@Component(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    TableList</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    formatDate(time: Date) &#123;</span><br><span class="line">      const date &#x3D; new Date(time);</span><br><span class="line">      return formatDate(date, &quot;yyyy-MM-dd&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">export default class SongFirst extends Vue &#123;</span><br><span class="line">  subdesc &#x3D; &quot;&quot;;</span><br><span class="line">  sheepList &#x3D; [];</span><br><span class="line">  totalCount &#x3D; 0;</span><br><span class="line">  currentPage &#x3D; 1;</span><br><span class="line"></span><br><span class="line">  created() &#123;</span><br><span class="line">    this.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get() &#123;</span><br><span class="line">    if (typeof this.$route.query.songId &#x3D;&#x3D;&#x3D; &quot;undefined&quot;) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    axios(&#123;</span><br><span class="line">      url: &quot;https:&#x2F;&#x2F;api.imjad.cn&#x2F;cloudmusic&#x2F;&quot;,</span><br><span class="line">      method: &quot;get&quot;,</span><br><span class="line">      params: &#123;</span><br><span class="line">        type: &quot;playlist&quot;,</span><br><span class="line">        id: this.$route.query.songId,</span><br><span class="line">        offest: this.currentPage - 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(res &#x3D;&gt; &#123;</span><br><span class="line">      this.subdesc &#x3D; res.data.playlist;</span><br><span class="line">      this.sheepList &#x3D; res.data.playlist.tracks;</span><br><span class="line">      this.totalCount &#x3D; res.data.playlist.trackCount;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changePage(currentPage: number) &#123;</span><br><span class="line">    this.currentPage &#x3D; currentPage;</span><br><span class="line">    this.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Watch(&quot;$route&quot;, &#123; immediate: false, deep: false &#125;)</span><br><span class="line">  pageChange() &#123;</span><br><span class="line">    this.get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="功能图"><a href="#功能图" class="headerlink" title="功能图"></a>功能图</h2><p>主页<br><img src="https://img-blog.csdnimg.cn/2020052317382318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="主页"><br>歌单<br><img src="https://img-blog.csdnimg.cn/20200523173908904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="歌单"><br>播放详情<br><img src="https://img-blog.csdnimg.cn/20200523173941241.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="播放详情"><br>我的（表单验证）<br><img src="https://img-blog.csdnimg.cn/20200523174013810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="表单验证"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>Vue</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>基于vue框架以及豆瓣API实现的小项目</title>
    <url>/2020/06/06/vue-douban/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 22:57:03 GMT+0800 (GMT+08:00) --><a id="more"></a><h1 id="vue-vue-router-axios-vuex-iview-UI"><a href="#vue-vue-router-axios-vuex-iview-UI" class="headerlink" title="vue+vue-router+axios+vuex+iview UI"></a>vue+vue-router+axios+vuex+iview UI</h1><p>router 分为/ /movie /book<br>iview UI 使用了Menu， Tabs，Page， Spin， Button(ButtonGroup)，Divider,BackTop<br><backtop></backtop>in movie and book.vue on Spin<br>vuex: movie.js book.js</p><h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><p>github地址： <a href="https://github.com/ljlhnick/vueDouban" target="_blank" rel="noopener">https://github.com/ljlhnick/vueDouban</a><br>采用的技术支持：</p><ol><li><strong>Vue框架</strong>，基于vue-cli3版本，可以采用vue ui查看图形化界面 ；</li><li><strong>vue-router</strong> router 将路由分为分为/ /movie /book三大部分；</li><li>采用 <strong>iview UI</strong> 框架，使用了Menu， Tabs，Page， Spin， Button(ButtonGroup)，Divider,BackTop组件(<backtop></backtop>in movie and book.vue on Spin)；</li><li><strong>vuex</strong> 进行数据的状态管理；</li><li>使用axios与后台进行接口数据的交互；</li><li>采用 <strong>test</strong>和 <strong>E2E</strong></li></ol><h2 id="模块划分"><a href="#模块划分" class="headerlink" title="模块划分"></a>模块划分</h2><p>电影：懒加载，tab切换，分页，点击查看详情的路由跳转，回到顶部<br>电影详情：轮播图，列表渲染<br>图书：懒加载，tab切换，分页，点击查看详情的路由跳转，回到顶部<br>图书详情：列表渲染，modal对话框</p><h2 id="功能图"><a href="#功能图" class="headerlink" title="功能图"></a>功能图</h2><p>movie<br><img src="https://img-blog.csdnimg.cn/20200430173809269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="电影列表"><br><img src="https://img-blog.csdnimg.cn/20200430173910296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="电影详情"></p><p>Book<br><img src="https://img-blog.csdnimg.cn/20200430173606571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="书籍列表"><br><img src="https://img-blog.csdnimg.cn/20200430173655431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="书籍tab切换"><br><img src="https://img-blog.csdnimg.cn/20200430173741476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="书籍详情"></p><h2 id="vue-ui-上-unit-截图"><a href="#vue-ui-上-unit-截图" class="headerlink" title="vue ui 上 unit 截图"></a>vue ui 上 unit 截图</h2><p><img src="https://img-blog.csdnimg.cn/20200430173337642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="unit单元测试"><br>E2E<br><img src="https://img-blog.csdnimg.cn/2020043017345324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="黑盒测试"></p><h2 id="单元测试覆盖率之jest测试"><a href="#单元测试覆盖率之jest测试" class="headerlink" title="单元测试覆盖率之jest测试"></a>单元测试覆盖率之jest测试</h2><p>安装依赖包： jest、vue-jest、bebel-jest， chai（断言库）<br>配置图：(jest.conf.js)<br><img src="https://img-blog.csdnimg.cn/20200523172121918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="jest.conf.js"><br>在package.json中新增jest命令<br><img src="https://img-blog.csdnimg.cn/20200523172358292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="jest命令"></p><h2 id="测试用例编写"><a href="#测试用例编写" class="headerlink" title="测试用例编写"></a>测试用例编写</h2><p>编写.spec.js/.js测试文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; expect &#125; from &#39;chai&#39;;</span><br><span class="line">import fetch from &quot;node-fetch&quot;;</span><br><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">import &#123; shallowMount, createLocalVue &#125; from &#39;@vue&#x2F;test-utils&#39;</span><br><span class="line">import Index from &#39;@&#x2F;components&#x2F;Index.vue&#39;;</span><br><span class="line">import Vuex from &#39;vuex&#39;;</span><br><span class="line">import &#123; moduleA &#125; from &quot;..&#x2F;..&#x2F;src&#x2F;store&#x2F;index.js&quot;;</span><br><span class="line"></span><br><span class="line">describe(&#39;Index.vue&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">  &#x2F;&#x2F;检查原始组件选项</span><br><span class="line">  it(&#39;has a created hook&#39;,() &#x3D;&gt; &#123;</span><br><span class="line">    expect(typeof Index.created).to.eql(&quot;function&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 评估Index组件中Carousel组件从下标为0的图片开始</span><br><span class="line">  it(&#39;sets the correct default data&#39;,() &#x3D;&gt; &#123; </span><br><span class="line">    expect(typeof Index.data).to.eql(&#39;function&#39;);</span><br><span class="line">    const defaultData &#x3D; Index.data();</span><br><span class="line">    expect(defaultData.carouseIndex).to.exist;</span><br><span class="line">    expect(defaultData.carouseIndex).to.eql(0);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;创建一个实例并检查渲染输出--图片轮播有5张</span><br><span class="line">  it(&#39;render the correct message&#39;, ()&#x3D;&gt;&#123;</span><br><span class="line">    const Constructor &#x3D; Vue.extend(Index);</span><br><span class="line">    const vm &#x3D; new Constructor().$mount();</span><br><span class="line">    expect(vm.$el.carsouleList).length &#x3D;&#x3D; 5;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;通过但是没有被覆盖</span><br><span class="line">  it(&#39;check computed value&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    const vm &#x3D; new Vue(Index).$mount();</span><br><span class="line">    expect(Index.computed.products).length &#x3D;&#x3D;&#x3D; 4;</span><br><span class="line">    expect(vm.$el.products).length &gt; 0;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;测试getters</span><br><span class="line">  it(&#39;check getters saleProducts&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    const localVue &#x3D; createLocalVue();</span><br><span class="line">    localVue.use(Vuex);</span><br><span class="line"></span><br><span class="line">    const vuexStore &#x3D; new Vuex.Store(moduleA);</span><br><span class="line">    vuexStore.getters.saleProducts;</span><br><span class="line">    expect(vuexStore.state.products[1].price).to.eql(120);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;测试mutataions</span><br><span class="line">  it(&#39;check mutataions minuPrice&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    const localVue &#x3D; createLocalVue();</span><br><span class="line">    localVue.use(Vuex);</span><br><span class="line"></span><br><span class="line">    const vuexStore &#x3D; new Vuex.Store(moduleA);</span><br><span class="line">    vuexStore.commit(&#39;minuPrice&#39;, 2);</span><br><span class="line">    expect(vuexStore.state.products).length &#x3D;&#x3D;&#x3D; 4;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  it(&#39;check mutataions setActiveMenu&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    const localVue &#x3D; createLocalVue();</span><br><span class="line">    localVue.use(Vuex);</span><br><span class="line"></span><br><span class="line">    const vuexStore &#x3D; new Vuex.Store(moduleA);</span><br><span class="line">    vuexStore.commit(&#39;setActiveMenu&#39;, &#39;电影&#39;);</span><br><span class="line">    expect(vuexStore.state.activeMenu).to.eql(&quot;电影&quot;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;测试action</span><br><span class="line">  it(&#39;check minuPriceAsync&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">    const localVue &#x3D; createLocalVue();</span><br><span class="line">    localVue.use(Vuex);</span><br><span class="line"></span><br><span class="line">    const vuexStore &#x3D; new Vuex.Store(moduleA);</span><br><span class="line">    vuexStore.dispatch(&#39;minuPriceAsync&#39;, 5);</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">      vuexStore.commit(&#39;minuPrice&#39;, 5);</span><br><span class="line">      expect(vuexStore.state.products[0].price).to.eql(246);</span><br><span class="line">      done(); </span><br><span class="line">    &#125;, 2000);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>单元测试覆盖率截图（点开coverage下的一个html文件）<br><img src="https://img-blog.csdnimg.cn/20200528135358486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="控制台调试"><a href="#控制台调试" class="headerlink" title="控制台调试"></a>控制台调试</h2><p><strong>VUE_DEVTOOLS_GLOBAL_HOOK</strong>.store查看store，有以下属性<br><img src="https://img-blog.csdnimg.cn/20200430175551604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200430175645276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xqbGhuaWNr,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="路由拦截"><a href="#路由拦截" class="headerlink" title="路由拦截"></a>路由拦截</h2><p>beforeRouteEnter (to, from, next) {<br>// 在渲染该组件的对应路由被 confirm 前调用<br>// 不能获取组件实例 <code>this</code><br>// 因为当钩子执行前，组件实例还没被创建<br>},<br>beforeRouteUpdate (to, from, next) {<br>// 在当前路由改变，但是该组件被复用时调用<br>// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，<br>// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。<br>// 可以访问组件实例 <code>this</code><br>},<br>beforeRouteLeave (to, from, next) {<br>// 导航离开该组件的对应路由时调用<br>// 可以访问组件实例 <code>this</code><br>}</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>Vue</category>
        <category>Jest</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>Vue</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript再次学习</title>
    <url>/2020/06/27/2020-06-27/</url>
    <content><![CDATA[<!-- build time:Sun Jun 28 2020 23:03:59 GMT+0800 (GMT+08:00) --><a id="more"></a><p>在之前的公司一直要求用typescript+cshtml使用，将ts编译成js，在控制台中可以查看指定ts文件进行debug，查看其编译后的js文件<br>ts是强类型的js超集，可编译纯js，支持js的最新特性</p><h2 id="使用中的心得"><a href="#使用中的心得" class="headerlink" title="使用中的心得"></a>使用中的心得</h2><p>1.ts支持强类型和静态类型，模块（本地js不支持模块），可选参数功能。<br>2.可以使用js中没有的class在此基础上可以继承父类，减少代码的重用性。<br>3.拥有js中没有的void和枚举以及any类型。<br>4.在编辑器中支持自动完成，类型检查，以及查看源文档<br>5.支持错误代码提示的机制<br>6.面向对象编程的概念，比如类、接口、泛型、继承。支持函数重载<br>7.其创始人是一个c#团队的人，现在版本是3+，支持js的最新特性，其代码风格和规范和c#类似</p><p>ts需要编译后才可以在浏览器中使用，编译的时长比较久，平时编译一个项目需要3-4分钟左右，对于第三方js库，需要定义库文件</p><p>tsc命令编译ts文件</p><p>由语言、编译器、语言服务三个主组件组成</p><p>继承：从一个类获取另外一个类属性和行为的机制</p><p>模块：创建一组相关变量、函数、类和接口的强大方法。模块中的变量、函数、类、接口不能再模块外部直接访问。</p><p>命名空间（内部模块）：对功能进行逻辑分组的一种方式。</p><p>泛型：一个提供创建可重用组件（处理多种数据类型）方法的工具。</p><h2 id="内部模块与外部模块的区别"><a href="#内部模块与外部模块的区别" class="headerlink" title="内部模块与外部模块的区别"></a>内部模块与外部模块的区别</h2><p>内部<del>将变量、函数、类、接口放在一个单元中并可以导出到另外一个模块。而外部</del>只显示声明变量相关的方法和参数<br>外部~在最新ts版本中成为模块</p><h2 id="ts装饰器"><a href="#ts装饰器" class="headerlink" title="ts装饰器"></a>ts装饰器</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>ts支持嵌入、类型检查、直接将jsx编译为js。但是必须用.tsx扩展名并启用jsx选项。<br>rest参数用于向函数传递零个或者多个值。须遵守以下规则：一个函数值允许一个rest参数、且是数组类型、是参数列表中最后一个参数</p><h2 id="declare关键字"><a href="#declare关键字" class="headerlink" title="declare关键字"></a>declare关键字</h2><!-- rebuild by neat -->]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
